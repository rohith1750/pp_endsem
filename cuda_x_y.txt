%%cuda
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 3
#define TILE_WIDTH 3

__global__ void matrixSumAndModify(int *a, int *b, int *c, int x, int y, int width) {
    int row = threadIdx.y + blockIdx.y * blockDim.y;
    int col = threadIdx.x + blockIdx.x * blockDim.x;
    
    if (row < width && col < width) {
        c[row * width + col] = a[row * width + col] + b[row * width + col];

        // Modify elements based on whether the sum is even or odd
        if (c[row * width + col] % 2 == 0) {
            c[row * width + col] += x;
        } else {
            c[row * width + col] -= y;
        }
    }
}

int main() {
    int *a, *b, *c;
    int *d_a, *d_b, *d_c;
    int x = 10; // Value to add if the sum is even
    int y = 5;  // Value to subtract if the sum is odd
    int size = N * N * sizeof(int);

    
    a = (int*)malloc(size);
    b = (int*)malloc(size);
    c = (int*)malloc(size);

    
    srand(time(NULL));
    for (int i = 0; i < N * N; i++) {
        a[i] = rand() % 10;
        b[i] = rand() % 10;
    }

    
    cudaMalloc((void**)&d_a, size);
    cudaMalloc((void**)&d_b, size);
    cudaMalloc((void**)&d_c, size);

    
    cudaMemcpy(d_a, a, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, b, size, cudaMemcpyHostToDevice);

    
    dim3 dimGrid((N - 1) / TILE_WIDTH + 1, (N - 1) / TILE_WIDTH + 1, 1);
    dim3 dimBlock(TILE_WIDTH, TILE_WIDTH, 1);

    
    matrixSumAndModify<<<dimGrid, dimBlock>>>(d_a, d_b, d_c, x, y, N);

    
    cudaMemcpy(c, d_c, size, cudaMemcpyDeviceToHost);

    
    printf("Result Matrix C:\n");
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%d ", c[i * N + j]);
        }
        printf("\n");
    }

    // Free device memory
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);

    // Free host memory
    free(a);
    free(b);
    free(c);

    return 0;
}
