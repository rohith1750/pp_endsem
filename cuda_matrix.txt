%%cuda
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 3
#define TILE_WIDTH 3

__global__ void matrixMultiply(float *a, float *b, float *c, int width) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < width && col < width) {
        float sum = 0.0f;
        for (int i = 0; i < width; ++i) {
            sum += a[row * width + i] * b[i * width + col];
        }
        c[row * width + col] = sum;
    }
}

int main() {
    float *a, *b, *c;
    float *d_a, *d_b, *d_c;
    int size = N * N * sizeof(float);

    // Allocate memory on host
    a = (float*)malloc(size);
    b = (float*)malloc(size);
    c = (float*)malloc(size);

    // Initialize matrices 'a' and 'b' with random values
    
    for (int i = 0; i < N * N; ++i) {
        a[i] = (float)(rand() % 10); // Random values between 0 and 9
        b[i] = (float)(rand() % 10);
    }

    // Allocate memory on device
    cudaMalloc((void**)&d_a, size);
    cudaMalloc((void**)&d_b, size);
    cudaMalloc((void**)&d_c, size);

    // Copy matrices 'a' and 'b' from host to device
    cudaMemcpy(d_a, a, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, b, size, cudaMemcpyHostToDevice);

    // Define grid and block dimensions
    dim3 dimGrid((N - 1) / TILE_WIDTH + 1, (N - 1) / TILE_WIDTH + 1, 1);
    dim3 dimBlock(TILE_WIDTH, TILE_WIDTH, 1);

    // Launch kernel
    matrixMultiply<<<dimGrid, dimBlock>>>(d_a, d_b, d_c, N);

    // Copy result matrix 'c' from device to host
    cudaMemcpy(c, d_c, size, cudaMemcpyDeviceToHost);

    // Output matrices 'a', 'b', and result matrix 'c'
    printf("Matrix A:\n");
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            printf("%.2f ", a[i * N + j]);
        }
        printf("\n");
    }

    printf("\nMatrix B:\n");
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            printf("%.2f ", b[i * N + j]);
        }
        printf("\n");
    }

    printf("\nResult Matrix C (A * B):\n");
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            printf("%.2f ", c[i * N + j]);
        }
        printf("\n");
    }

    // Free device memory
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);

    // Free host memory
    free(a);
    free(b);
    free(c);

    return 0;
}
